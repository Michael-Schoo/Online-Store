// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  username       String          @unique
  password       String // hashed
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  admin          Boolean         @default(false)
  listings       Listing[]
  purchaces      Purchace[]
  listingReviews ListingReview[]
  notifications  Notification[]
  listingImages  ListingImage[]
}

model Listing {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  price         Float
  currency      String          @default("USD") @db.VarChar(3)
  archived      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  publishedAt   DateTime?
  published     Boolean         @default(false)
  // if there is a purchace or bid, it is locked for edits
  locked        Boolean         @default(false)
  userId        Int
  averageRating Float?
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          Tag[]
  purchaces     Purchace[]
  reviews       ListingReview[]
  images        ListingImage[]

  @@index([userId])
}

model ListingImage {
  id        Int      @id @default(autoincrement())
  customAWS String?
  awsKey    String?
  customURL String?
  listing   Listing? @relation(fields: [listingId], references: [id])
  listingId Int?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([userId])
}

model ListingReview {
  id          Int     @id @default(autoincrement())
  description String?
  rating      Int     @db.UnsignedTinyInt
  listingId   Int
  userId      Int
  listing     Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([userId])
}

model Purchace {
  id        Int      @id @default(autoincrement())
  time      DateTime @default(now())
  userId    Int
  listingId Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull)
  title     String
  price     Float

  @@index([userId])
  @@index([listingId])
}

model Tag {
  // id        Int       @id @default(autoincrement())
  name      String    @id @db.VarChar(20)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  items     Listing[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  read      Boolean  @default(false)
  url       String?
  createdAt DateTime @default(now())

  @@index([userId])
}
